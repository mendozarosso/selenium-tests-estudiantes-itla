const { By } = require('selenium-webdriver');
const { takeScreenshot, setupDriver } = require('../config/test-setup');

const APP_URL = 'file:///C:/Users/jason/programacion/SystemaDeGestionEstudiantes/index.html';

describe('HU-003: Crear Estudiante', () => {
  let driver;

  beforeEach(async () => {
    driver = await setupDriver(APP_URL);
    await driver.sleep(2000);
  });

  describe('ðŸŸ¢ Camino Feliz - Crear Estudiante', () => {
    test('CP-003: Debe crear estudiante con datos vÃ¡lidos', async () => {
      console.log('ðŸ§ª Iniciando CP-003: Crear Estudiante');
      
      await driver.findElement(By.id('nombre')).clear();
      await driver.findElement(By.id('nombre')).sendKeys('Juan PÃ©rez');
      await driver.findElement(By.id('apellidos')).clear();
      await driver.findElement(By.id('apellidos')).sendKeys('GarcÃ­a');
      await driver.findElement(By.id('carrera')).clear();
      await driver.findElement(By.id('carrera')).sendKeys('IngenierÃ­a de Software');
      await driver.findElement(By.id('edad')).clear();
      await driver.findElement(By.id('edad')).sendKeys('22');
      
      await takeScreenshot('crear_estudiante_datos_validos');
      
      await driver.findElement(By.id('agregarBtn')).click();
      await driver.sleep(2000);
      
      // Verificar que se agregÃ³
      const estudiantes = await driver.findElements(By.css('.student-card'));
      expect(estudiantes.length).toBeGreaterThan(0);
      
      await takeScreenshot('estudiante_creado');
      console.log('âœ… CP-003 EXITOSO');
    });
  });

  describe('ðŸ”´ Prueba Negativa - Datos InvÃ¡lidos', () => {
    test('CN-003: Debe rechazar estudiante con campos vacÃ­os', async () => {
      console.log('ðŸ§ª Iniciando CN-003: Campos VacÃ­os');
      
      // Limpiar todos los campos
      await driver.findElement(By.id('nombre')).clear();
      await driver.findElement(By.id('apellidos')).clear();
      await driver.findElement(By.id('carrera')).clear();
      await driver.findElement(By.id('edad')).clear();
      
      await takeScreenshot('crear_estudiante_campos_vacios');
      
      await driver.findElement(By.id('agregarBtn')).click();
      await driver.sleep(1000);
      
      // Verificar que no se agregÃ³ (mismo nÃºmero de estudiantes)
      const estudiantesInicial = await driver.findElements(By.css('.student-card'));
      
      await takeScreenshot('crear_estudiante_rechazado');
      console.log('âœ… CN-003 EXITOSO');
    });
  });

  describe('ðŸŸ¡ Prueba de LÃ­mites - Edad LÃ­mite', () => {
    test('CL-003: Debe manejar edad en los lÃ­mites', async () => {
      console.log('ðŸ§ª Iniciando CL-003: Edad LÃ­mite');
      
      await driver.findElement(By.id('nombre')).clear();
      await driver.findElement(By.id('nombre')).sendKeys('Estudiante Mayor');
      await driver.findElement(By.id('apellidos')).clear();
      await driver.findElement(By.id('apellidos')).sendKeys('Test');
      await driver.findElement(By.id('carrera')).clear();
      await driver.findElement(By.id('carrera')).sendKeys('AdministraciÃ³n');
      await driver.findElement(By.id('edad')).clear();
      await driver.findElement(By.id('edad')).sendKeys('65'); // Edad lÃ­mite
      
      await takeScreenshot('crear_estudiante_edad_limite');
      
      await driver.findElement(By.id('agregarBtn')).click();
      await driver.sleep(2000);
      
      await takeScreenshot('estudiante_edad_limite_creado');
      console.log('âœ… CL-003 EXITOSO');
    });
  });
});
